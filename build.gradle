//file:noinspection GroovyUnusedAssignment

buildscript {
    repositories {
        maven { url = "http://maven.minecraftforge.net/" }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.10'
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'

version = '1.12.2-5.4'
group = 'mods.thecomputerizer.musictriggers'
archivesBaseName = 'musictriggers'

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    accessTransformer = file('src/main/resources/META-INF/musictriggers_at.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    google()
    mavenCentral()
    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = uri("https://maven.mcmoddev.com")
    }
    maven {
        url = uri("https://jitpack.io")
    }
    maven {
        url = uri("https://www.dcm4che.org/maven2/")
    }
    maven {
        url = uri("https://m2.dv8tion.net/releases")
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

sourceSets {
    main {
        ext.refMap = "mixins.musictriggers.refmap.json"
    }
}

configurations {
    embed
    compile.extendsFrom(embed)
    shade
    implementation.extendsFrom(shade)
    shadow.extendsFrom shade
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    shade("com.googlecode.soundlibs:jlayer:1.0.1.4")
    shade("com.github.sealedtx:java-youtube-downloader:3.0.2")
    shade("com.moandjiezana.toml:toml4j:0.7.2") {
        exclude group: 'com.google.code.gson', module: 'gson' // provided by minecraft
    }
    shade("org.jcodec:jcodec:0.2.5")
    shade("org.jcodec:jcodec-javase:0.2.5")
    shade("io.github.kostaskougios:cloning:1.10.3")
    //shade("com.sedmelluq:lavaplayer:1.3.78"){
        //exclude module: 'httpclient'
    //}

    //libraries that may or may not be included by forge/minecraft and need to be relocated
    //shade ("org.slf4j:slf4j-api:2.0.0-alpha6")
    //shade ("org.apache.httpcomponents:httpcore:4.4.12")
    //shade ("org.apache.httpcomponents:httpclient:4.5.10")
    //shade ("org.apache.commons:commons-collections4:4.4")

    implementation fg.deobf("curse.maven:mixin-booter-419286:3687785")
    implementation('org.spongepowered:mixin:0.8.4')

    implementation fg.deobf("curse.maven:codechicken-lib-242818:2779848")
    implementation fg.deobf("curse.maven:bloodmoon-226321:2537917")
    implementation fg.deobf("curse.maven:nyx-349214:3161738")
    implementation fg.deobf("curse.maven:weather-storms-tornadoes-237746:2596867")
    implementation fg.deobf("curse.maven:atomicstrykers-infernal-mobs-227875:3431758")
    implementation fg.deobf("curse.maven:dynamic-surroundings-238891:3497269")
    implementation fg.deobf("curse.maven:coroutil-237749:2902920")
    implementation fg.deobf("curse.maven:serene-seasons-291874:2799213")
    implementation fg.deobf("curse.maven:champions-307152:3177947")
    implementation fg.deobf("curse.maven:jei-238222:3488178")
    implementation fg.deobf("net.darkhax.gamestages:GameStages-1.12.2:2.0.98")
}

shadowJar {
    //necessary relocation
    //relocate 'org.slf4j', 'mods.thecomputerizer.musictriggers.libraries.sljf4'
    //relocate 'org.apache.commons', 'mods.thecomputerizer.musictriggers.libraries.apache.commons'
    //relocate 'org.apache.http', 'mods.thecomputerizer.musictriggers.libraries.apache.http'
    //not strictly necessary relocation
    relocate 'junit', 'mods.thecomputerizer.musictriggers.libraries.junit'
    relocate 'net.sourceforge', 'mods.thecomputerizer.musictriggers.libraries.sourceforge'
    relocate 'javazoom.jl', 'mods.thecomputerizer.musictriggers.libraries.jl'
    relocate 'com.alibaba', 'mods.thecomputerizer.musictriggers.libraries.alibaba'
    configurations = [project.configurations.shadow]
    classifier ''
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}
processResources {
    filesMatching("mcmod.info") {
        expand "version": project.version, "mcversion": "1.12.2"
    }

    inputs.property "version", project.version
    inputs.property "mcversion", "1.12.2"
}

mixin {
    disableAnnotationProcessorCheck()
}

jar {
    manifest {
        attributes([
            "FMLAT": "musictriggers_at.cfg",
            "Specification-Title": "musictriggers",
            "Specification-Vendor": "musictriggerssareus",
            "Specification-Version": "1.12.2-5.4",
            "Implementation-Title": project.name,
            "Implementation-Version": "1.12.2-5.4",
            "Implementation-Vendor" :"musictriggers",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
tasks.assemble.dependsOn shadowJar