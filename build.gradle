//file:noinspection GroovyAssignabilityCheck

plugins {
    id 'net.minecraftforge.gradle' version '5.1.69'
    id 'com.github.johnrengelman.shadow' version '7.1.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        mergetool
    }
}

version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group
archivesBaseName = project.base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: 'stable', version: project.mappings_version
    accessTransformer = file('src/main/resources/META-INF/musictriggers_at.cfg')
    runs {
        def args = [
                '-Dmixin.debug.export=true',
                '-Dmixin.hotSwap=true',
                '-Dmixin.checks.interfaces=true'
        ]
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
    }
}


repositories {
    maven {
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = 'Modrinth'
        url = uri('https://api.modrinth.com/maven')
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        name = 'Sponge'
        url = uri('https://repo.spongepowered.org/maven')
    }
    maven {
        url = uri('https://maven.blamejared.com')
    }
    maven {
        url = uri('https://m2.dv8tion.net/releases')
    }
    maven {
        url = uri('https://jitpack.io')
    }
}

configurations {
    shade
    implementation.extendsFrom shade
    shadow.extendsFrom shade
}

dependencies {
    //minecraft
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"


    //external dependencies
    shade("io.github.kostaskougios:cloning:${project.cloning_version}")
    shade("com.github.walkyst:lavaplayer-fork:${project.lava_version}") {
        exclude module: 'commons-io'
    }

    //mixin
    shade("org.spongepowered:mixin:${project.mixin_version}") {
        exclude module: 'asm-commons'
        exclude module: 'asm-tree'
        exclude module: 'commons-io'
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'launchwrapper'
        exclude module: 'log4j-core'
    }
    annotationProcessor("org.spongepowered:mixin:${project.mixin_version}:processor")

    //required mod dependencies
    implementation(fg.deobf("maven.modrinth:the-impossible-library:${project.minecraft_version}-${project.lib_version}"))
    //local versions of required dependencies for testing
    //noinspection DependencyNotationArgument
    //implementation name: "theimpossiblelibrary-${project.minecraft_version}-${project.lib_version}"

    //mod support dependencies
    implementation(fg.deobf("curse.maven:bloodmoon-226321:${project.bloodmoon_version}"))
    implementation(fg.deobf("curse.maven:nyx-349214:${project.nyx_version}"))
    implementation(fg.deobf("curse.maven:atomicstrykers-infernal-mobs-227875:${project.infernal_version}"))
    implementation(fg.deobf("curse.maven:coroutil-237749:${project.coroutil_version}"))
    implementation(fg.deobf("curse.maven:weather-storms-tornadoes-237746:${project.weather_version}"))
    implementation(fg.deobf("curse.maven:serene-seasons-291874:${project.seasons_version}"))
    implementation(fg.deobf("curse.maven:champions-307152:${project.champions_version}"))
    implementation(fg.deobf("net.darkhax.gamestages:GameStages-${project.minecraft_version}:${project.gamestages_version}"))

    //idk whats wrong with the mod but i cant get it to work in a dev environment
    compileOnly(fg.deobf("curse.maven:dynamic-surroundings-238891:${project.dynamic_surroundings_version}"))

    //only needed for runtime
    runtimeOnly(fg.deobf("curse.maven:bookshelf-228525:${project.bookshelf_version}"))
    runtimeOnly(fg.deobf("curse.maven:orelib-307806:${project.orelib_version}"))
    runtimeOnly(fg.deobf("curse.maven:had-enough-items-557549:${project.hei_version}"))
}

shadowJar {
    //necessary relocation
    relocate 'org.apache.commons.codec', "${project.shadow_group}.apache.commons.codec"
    relocate 'org.apache.commons.logging', "${project.shadow_group}.apache.commons.logging"
    relocate 'org.apache.http', "${project.shadow_group}.apache.http"
    relocate 'org.jsoup', "${project.shadow_group}.jsoup"
    relocate 'org.objenesis', "${project.shadow_group}.objenesis"
    relocate 'org.slf4j', "${project.shadow_group}.slf4j"
    relocate 'net.iharder', "${project.shadow_group}.iharder"
    relocate 'mozilla', "${project.shadow_group}"
    relocate 'com.fasterxml', "${project.shadow_group}.fasterxml"
    relocate 'com.rits', "${project.shadow_group}.rits"
    relocate 'certificates', "${project.shadow_group}"
    configurations = [project.configurations.shadow]
    classifier ''
    mergeServiceFiles()
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft_version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft_version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

mixin {
    add sourceSets.main, 'musictriggers.refmap.json'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(configurations.shade.collect {
        it.isDirectory() ? it : zipTree(it)
    }) {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }
    manifest {
        attributes([
                'Specification-Version': project.version,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePlugin': 'mods.thecomputerizer.musictriggers.core.MixinLoadingPlugin',
                'FMLCorePluginContainsFMLMod': true,
                //'ForceLoadAsMod': true,
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'MixinConfigs': 'musictriggers.mixin.json',
                'FMLAT': 'musictriggers_at.cfg'
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.assemble.dependsOn shadowJar